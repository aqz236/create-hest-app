import { type TSchema } from "@sinclair/typebox";
/**
 * 验证错误
 */
export declare class ValidationError extends Error {
    field: string;
    value: any;
    constraint: string;
    constructor(message: string, field: string, value: any, constraint: string);
}
/**
 * 验证异常 - 包含多个验证错误
 */
export declare class ValidationException extends Error {
    errors: ValidationError[];
    constructor(errors: ValidationError[]);
    getMessages(): string[];
    getFormattedMessage(): string;
}
/**
 * 验证管道选项
 */
export interface ValidationPipeOptions {
    whitelist?: boolean;
    forbidNonWhitelisted?: boolean;
    transform?: boolean;
    disableErrorMessages?: boolean;
    validateCustomDecorators?: boolean;
}
/**
 * 验证管道
 */
export declare class ValidationPipe {
    private readonly options;
    constructor(options?: ValidationPipeOptions);
    /**
     * 验证对象
     */
    validate<T>(target: new () => T, object: any): Promise<T>;
    /**
     * 过滤属性（白名单模式）
     */
    private filterProperties;
    /**
     * 获取自定义错误消息
     */
    private getCustomMessage;
    /**
     * 验证单个值
     */
    validateValue<T>(schema: TSchema, value: any, fieldName?: string): T;
    /**
     * 创建 DTO 验证装饰器
     */
    static createDtoValidator<T>(dtoClass: new () => T): (target: any, propertyKey: string | symbol, parameterIndex: number) => void;
}
//# sourceMappingURL=validation.pipe.d.ts.map