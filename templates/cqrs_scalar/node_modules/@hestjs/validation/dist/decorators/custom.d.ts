import { type TSchema } from "@sinclair/typebox";
import "reflect-metadata";
/**
 * 自定义验证装饰器 - 允许用户完全使用 TypeBox API
 *
 * @param schema TypeBox schema
 * @param options 验证选项
 *
 * @example
 * ```typescript
 * import { Type } from '@sinclair/typebox';
 * import { Custom } from '@hestjs/validation';
 *
 * class UserDto {
 *   // 自定义字符串验证
 *   @Custom(Type.String({ minLength: 3, maxLength: 20, pattern: '^[a-zA-Z]+$' }))
 *   username!: string;
 *
 *   // 自定义数字验证
 *   @Custom(Type.Number({ minimum: 18, maximum: 65, multipleOf: 1 }))
 *   age!: number;
 *
 *   // 自定义联合类型
 *   @Custom(Type.Union([Type.Literal('admin'), Type.Literal('user'), Type.Literal('guest')]))
 *   role!: 'admin' | 'user' | 'guest';
 *
 *   // 自定义数组验证
 *   @Custom(Type.Array(Type.String({ format: 'email' }), { minItems: 1, maxItems: 5 }))
 *   emails!: string[];
 *
 *   // 自定义对象验证
 *   @Custom(Type.Object({
 *     street: Type.String(),
 *     city: Type.String(),
 *     zipCode: Type.String({ pattern: '^\\d{5}$' })
 *   }))
 *   address!: { street: string; city: string; zipCode: string };
 *
 *   // 自定义日期验证
 *   @Custom(Type.String({ format: 'date-time' }))
 *   createdAt!: string;
 *
 *   // 复杂的条件验证
 *   @Custom(Type.Intersect([
 *     Type.Object({ type: Type.Literal('premium') }),
 *     Type.Object({ features: Type.Array(Type.String(), { minItems: 1 }) })
 *   ]))
 *   subscription?: { type: 'premium'; features: string[] };
 * }
 * ```
 */
export declare function Custom(schema: any, options?: {
    message?: string;
    optional?: boolean;
}): (target: any, propertyKey: string | symbol) => void;
/**
 * TypeBox Schema 工厂类 - 提供常用的 schema 构建器
 */
export declare class SchemaFactory {
    /**
     * 创建枚举 schema
     */
    static enum<T extends readonly string[]>(values: T, options?: {
        message?: string;
    }): import("@sinclair/typebox").TUnion<import("@sinclair/typebox").TLiteral<string>[]>;
    /**
     * 创建条件 schema
     */
    static conditional(condition: TSchema, thenSchema: TSchema, elseSchema: TSchema): import("@sinclair/typebox").TUnion<[import("@sinclair/typebox").TIntersect<[TSchema, TSchema]>, import("@sinclair/typebox").TIntersect<[import("@sinclair/typebox").TNot<TSchema>, TSchema]>]>;
    /**
     * 创建递归 schema
     */
    static recursive<T>(callback: (self: TSchema) => TSchema): import("@sinclair/typebox").TRecursive<TSchema>;
    /**
     * 创建模板字符串 schema
     */
    static template(pattern: string): import("@sinclair/typebox").TString;
    /**
     * 创建范围验证 schema
     */
    static range(min: number, max: number, options?: {
        exclusive?: boolean;
    }): import("@sinclair/typebox").TNumber;
    /**
     * 创建文件验证 schema
     */
    static file(options?: {
        maxSize?: number;
        allowedTypes?: string[];
        required?: boolean;
    }): import("@sinclair/typebox").TObject<{
        filename: import("@sinclair/typebox").TString;
        mimetype: import("@sinclair/typebox").TString;
        size: import("@sinclair/typebox").TNumber;
        buffer: import("@sinclair/typebox").TAny;
    }> | import("@sinclair/typebox").TIntersect<[import("@sinclair/typebox").TObject<{
        filename: import("@sinclair/typebox").TString;
        mimetype: import("@sinclair/typebox").TString;
        size: import("@sinclair/typebox").TNumber;
        buffer: import("@sinclair/typebox").TAny;
    }>, import("@sinclair/typebox").TObject<{
        size: import("@sinclair/typebox").TNumber;
    }>]> | import("@sinclair/typebox").TIntersect<[import("@sinclair/typebox").TObject<{
        filename: import("@sinclair/typebox").TString;
        mimetype: import("@sinclair/typebox").TString;
        size: import("@sinclair/typebox").TNumber;
        buffer: import("@sinclair/typebox").TAny;
    }>, import("@sinclair/typebox").TObject<{
        mimetype: import("@sinclair/typebox").TUnion<import("@sinclair/typebox").TLiteral<string>[]>;
    }>]>;
    /**
     * 创建分页参数 schema
     */
    static pagination(): import("@sinclair/typebox").TObject<{
        page: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TNumber>;
        limit: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TNumber>;
        sort: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TString>;
        order: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TUnion<[import("@sinclair/typebox").TLiteral<"asc">, import("@sinclair/typebox").TLiteral<"desc">]>>;
    }>;
    /**
     * 创建搜索参数 schema
     */
    static search(): import("@sinclair/typebox").TObject<{
        q: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TString>;
        fields: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TArray<import("@sinclair/typebox").TString>>;
        filters: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TRecord<import("@sinclair/typebox").TString, import("@sinclair/typebox").TAny>>;
    }>;
    /**
     * 创建 UUID schema
     */
    static uuid(): import("@sinclair/typebox").TString;
    /**
     * 创建 MongoDB ObjectId schema
     */
    static objectId(): import("@sinclair/typebox").TString;
    /**
     * 创建颜色值 schema (hex)
     */
    static hexColor(): import("@sinclair/typebox").TString;
    /**
     * 创建信用卡号 schema
     */
    static creditCard(): import("@sinclair/typebox").TString;
    /**
     * 创建手机号 schema (中国)
     */
    static chinesePhoneNumber(): import("@sinclair/typebox").TString;
    /**
     * 创建身份证号 schema (中国)
     */
    static chineseIdCard(): import("@sinclair/typebox").TString;
}
/**
 * 预定义的常用验证装饰器
 */
export declare class CommonValidators {
    /**
     * UUID 验证
     */
    static UUID(options?: {
        message?: string;
        optional?: boolean;
    }): (target: any, propertyKey: string | symbol) => void;
    /**
     * ObjectId 验证
     */
    static ObjectId(options?: {
        message?: string;
        optional?: boolean;
    }): (target: any, propertyKey: string | symbol) => void;
    /**
     * 十六进制颜色验证
     */
    static HexColor(options?: {
        message?: string;
        optional?: boolean;
    }): (target: any, propertyKey: string | symbol) => void;
    /**
     * 信用卡号验证
     */
    static CreditCard(options?: {
        message?: string;
        optional?: boolean;
    }): (target: any, propertyKey: string | symbol) => void;
    /**
     * 中国手机号验证
     */
    static ChinesePhone(options?: {
        message?: string;
        optional?: boolean;
    }): (target: any, propertyKey: string | symbol) => void;
    /**
     * 中国身份证号验证
     */
    static ChineseIdCard(options?: {
        message?: string;
        optional?: boolean;
    }): (target: any, propertyKey: string | symbol) => void;
    /**
     * JSON 字符串验证
     */
    static JsonString(options?: {
        message?: string;
        optional?: boolean;
    }): (target: any, propertyKey: string | symbol) => void;
    /**
     * Base64 字符串验证
     */
    static Base64(options?: {
        message?: string;
        optional?: boolean;
    }): (target: any, propertyKey: string | symbol) => void;
    /**
     * IP 地址验证
     */
    static IPAddress(version?: "v4" | "v6", options?: {
        message?: string;
        optional?: boolean;
    }): (target: any, propertyKey: string | symbol) => void;
}
//# sourceMappingURL=custom.d.ts.map