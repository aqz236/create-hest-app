import { CallHandler, ExecutionContext, Interceptor } from "@hestjs/core";
/**
 * 参数验证元数据
 */
export interface ParameterValidationMetadata {
    index: number;
    dtoClass: new () => any;
}
/**
 * Body 验证装饰器
 */
export declare function Body<T>(dtoClass: new () => T): (target: any, propertyKey: string | symbol | undefined, parameterIndex: number) => void;
/**
 * Query 验证装饰器
 */
export declare function Query<T>(dtoClass: new () => T): (target: any, propertyKey: string | symbol | undefined, parameterIndex: number) => void;
/**
 * 验证拦截器
 */
export declare class ValidationInterceptor implements Interceptor {
    private readonly validationPipe;
    constructor();
    intercept(context: ExecutionContext, next: CallHandler): Promise<any>;
    /**
     * 获取请求体数据
     */
    private getRequestBody;
}
//# sourceMappingURL=validation.interceptor.d.ts.map