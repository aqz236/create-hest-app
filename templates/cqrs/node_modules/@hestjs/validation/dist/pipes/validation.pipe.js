var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { Injectable } from "@hestjs/core";
import { Type } from "@sinclair/typebox";
import { Value } from "@sinclair/typebox/value";
import { VALIDATION_METADATA_KEY, } from "../decorators/validation";
/**
 * 验证错误
 */
export class ValidationError extends Error {
    field;
    value;
    constraint;
    constructor(message, field, value, constraint) {
        super(message);
        this.field = field;
        this.value = value;
        this.constraint = constraint;
        this.name = "ValidationError";
    }
}
/**
 * 验证异常 - 包含多个验证错误
 */
export class ValidationException extends Error {
    errors;
    constructor(errors) {
        super("Validation failed");
        this.errors = errors;
        this.name = "ValidationException";
    }
    getMessages() {
        return this.errors.map((error) => error.message);
    }
    getFormattedMessage() {
        return this.errors
            .map((error) => `${error.field}: ${error.message}`)
            .join("; ");
    }
}
/**
 * 验证管道
 */
let ValidationPipe = class ValidationPipe {
    options;
    constructor(options = {}) {
        this.options = {
            whitelist: true,
            forbidNonWhitelisted: false,
            transform: true,
            disableErrorMessages: false,
            validateCustomDecorators: true,
            ...options,
        };
    }
    /**
     * 验证对象
     */
    async validate(target, object) {
        if (!object || typeof object !== "object") {
            throw new ValidationException([
                new ValidationError("Invalid input", "root", object, "object"),
            ]);
        }
        const metadata = Reflect.getMetadata(VALIDATION_METADATA_KEY, target);
        if (!metadata || !metadata.properties.length) {
            // 如果没有验证元数据，直接返回对象
            return object;
        }
        const errors = [];
        const result = {};
        // 创建 TypeBox 对象 schema
        const schemaProperties = {};
        const requiredFields = [];
        for (const prop of metadata.properties) {
            const propName = String(prop.propertyKey);
            schemaProperties[propName] = prop.schema;
            if (!prop.isOptional) {
                requiredFields.push(propName);
            }
        }
        const objectSchema = Type.Object(schemaProperties, {
            required: requiredFields,
            additionalProperties: !this.options.whitelist,
        });
        // 使用 TypeBox 进行验证
        const isValid = Value.Check(objectSchema, object);
        if (!isValid) {
            // 获取详细错误
            const validationErrors = [...Value.Errors(objectSchema, object)];
            for (const error of validationErrors) {
                const field = error.path.replace(/^\//, "") || "root";
                const customMessage = this.getCustomMessage(metadata, field);
                errors.push(new ValidationError(customMessage || error.message, field, error.value, String(error.type || "validation")));
            }
        }
        if (errors.length > 0) {
            throw new ValidationException(errors);
        }
        // 如果启用了转换，使用 TypeBox 进行类型转换
        if (this.options.transform) {
            try {
                const transformed = Value.Convert(objectSchema, object);
                return this.filterProperties(transformed, metadata);
            }
            catch (error) {
                // 转换失败，使用原始对象
                return this.filterProperties(object, metadata);
            }
        }
        return this.filterProperties(object, metadata);
    }
    /**
     * 过滤属性（白名单模式）
     */
    filterProperties(object, metadata) {
        if (!this.options.whitelist) {
            return object;
        }
        const result = {};
        const allowedProperties = new Set(metadata.properties.map((prop) => String(prop.propertyKey)));
        for (const [key, value] of Object.entries(object)) {
            if (allowedProperties.has(key)) {
                result[key] = value;
            }
            else if (this.options.forbidNonWhitelisted) {
                throw new ValidationException([
                    new ValidationError(`Property ${key} should not exist`, key, value, "whitelistValidation"),
                ]);
            }
        }
        return result;
    }
    /**
     * 获取自定义错误消息
     */
    getCustomMessage(metadata, field) {
        const property = metadata.properties.find((prop) => String(prop.propertyKey) === field);
        return property?.message;
    }
    /**
     * 验证单个值
     */
    validateValue(schema, value, fieldName = "value") {
        const isValid = Value.Check(schema, value);
        if (!isValid) {
            const errors = [...Value.Errors(schema, value)];
            const validationErrors = errors.map((error) => new ValidationError(error.message, fieldName, error.value, String(error.type || "validation")));
            throw new ValidationException(validationErrors);
        }
        if (this.options.transform) {
            try {
                return Value.Convert(schema, value);
            }
            catch {
                return value;
            }
        }
        return value;
    }
    /**
     * 创建 DTO 验证装饰器
     */
    static createDtoValidator(dtoClass) {
        return function (target, propertyKey, parameterIndex) {
            // 这里可以存储参数验证元数据
            // 实际的验证会在拦截器中进行
            const existingMetadata = Reflect.getMetadata("validation:parameters", target) || {};
            existingMetadata[parameterIndex] = dtoClass;
            Reflect.defineMetadata("validation:parameters", existingMetadata, target);
        };
    }
};
ValidationPipe = __decorate([
    Injectable(),
    __metadata("design:paramtypes", [Object])
], ValidationPipe);
export { ValidationPipe };
//# sourceMappingURL=validation.pipe.js.map