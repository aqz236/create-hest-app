import { type TSchema } from '@sinclair/typebox';
import 'reflect-metadata';
declare global {
    namespace Reflect {
        function defineMetadata(key: any, value: any, target: any, propertyKey?: string | symbol): void;
        function getMetadata(key: any, target: any, propertyKey?: string | symbol): any;
    }
}
/**
 * 验证元数据键
 */
export declare const VALIDATION_METADATA_KEY: unique symbol;
/**
 * 属性验证元数据
 */
export interface PropertyValidationMetadata {
    propertyKey: string | symbol;
    schema: TSchema;
    isOptional?: boolean;
    message?: string;
}
/**
 * 类验证元数据
 */
export interface ClassValidationMetadata {
    properties: PropertyValidationMetadata[];
}
/**
 * 字符串验证装饰器
 */
export declare function IsString(options?: {
    message?: string;
    minLength?: number;
    maxLength?: number;
    pattern?: string;
}): (target: any, propertyKey: string | symbol) => void;
/**
 * 数字验证装饰器
 */
export declare function IsNumber(options?: {
    message?: string;
    minimum?: number;
    maximum?: number;
    multipleOf?: number;
}): (target: any, propertyKey: string | symbol) => void;
/**
 * 整数验证装饰器
 */
export declare function IsInteger(options?: {
    message?: string;
    minimum?: number;
    maximum?: number;
}): (target: any, propertyKey: string | symbol) => void;
/**
 * 布尔值验证装饰器
 */
export declare function IsBoolean(options?: {
    message?: string;
}): (target: any, propertyKey: string | symbol) => void;
/**
 * 邮箱验证装饰器
 */
export declare function IsEmail(options?: {
    message?: string;
}): (target: any, propertyKey: string | symbol) => void;
/**
 * URL 验证装饰器
 */
export declare function IsUrl(options?: {
    message?: string;
}): (target: any, propertyKey: string | symbol) => void;
/**
 * 数组验证装饰器
 */
export declare function IsArray(itemSchema?: TSchema, options?: {
    message?: string;
    minItems?: number;
    maxItems?: number;
}): (target: any, propertyKey: string | symbol) => void;
/**
 * 枚举验证装饰器
 */
export declare function IsEnum(enumValues: any[], options?: {
    message?: string;
}): (target: any, propertyKey: string | symbol) => void;
/**
 * 日期验证装饰器
 */
export declare function IsDate(options?: {
    message?: string;
}): (target: any, propertyKey: string | symbol) => void;
/**
 * 可选字段装饰器
 */
export declare function IsOptional(): (target: any, propertyKey: string | symbol) => void;
/**
 * 长度验证装饰器
 */
export declare function Length(min: number, max?: number, options?: {
    message?: string;
}): (target: any, propertyKey: string | symbol) => void;
/**
 * 最小值验证装饰器
 */
export declare function Min(value: number, options?: {
    message?: string;
}): (target: any, propertyKey: string | symbol) => void;
/**
 * 最大值验证装饰器
 */
export declare function Max(value: number, options?: {
    message?: string;
}): (target: any, propertyKey: string | symbol) => void;
/**
 * 模式匹配验证装饰器
 */
export declare function Matches(pattern: string | RegExp, options?: {
    message?: string;
}): (target: any, propertyKey: string | symbol) => void;
//# sourceMappingURL=validation.d.ts.map