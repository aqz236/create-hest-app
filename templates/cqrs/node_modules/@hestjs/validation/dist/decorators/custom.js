import { Type } from "@sinclair/typebox";
import "reflect-metadata";
import { VALIDATION_METADATA_KEY, } from "./validation";
/**
 * 自定义验证装饰器 - 允许用户完全使用 TypeBox API
 *
 * @param schema TypeBox schema
 * @param options 验证选项
 *
 * @example
 * ```typescript
 * import { Type } from '@sinclair/typebox';
 * import { Custom } from '@hestjs/validation';
 *
 * class UserDto {
 *   // 自定义字符串验证
 *   @Custom(Type.String({ minLength: 3, maxLength: 20, pattern: '^[a-zA-Z]+$' }))
 *   username!: string;
 *
 *   // 自定义数字验证
 *   @Custom(Type.Number({ minimum: 18, maximum: 65, multipleOf: 1 }))
 *   age!: number;
 *
 *   // 自定义联合类型
 *   @Custom(Type.Union([Type.Literal('admin'), Type.Literal('user'), Type.Literal('guest')]))
 *   role!: 'admin' | 'user' | 'guest';
 *
 *   // 自定义数组验证
 *   @Custom(Type.Array(Type.String({ format: 'email' }), { minItems: 1, maxItems: 5 }))
 *   emails!: string[];
 *
 *   // 自定义对象验证
 *   @Custom(Type.Object({
 *     street: Type.String(),
 *     city: Type.String(),
 *     zipCode: Type.String({ pattern: '^\\d{5}$' })
 *   }))
 *   address!: { street: string; city: string; zipCode: string };
 *
 *   // 自定义日期验证
 *   @Custom(Type.String({ format: 'date-time' }))
 *   createdAt!: string;
 *
 *   // 复杂的条件验证
 *   @Custom(Type.Intersect([
 *     Type.Object({ type: Type.Literal('premium') }),
 *     Type.Object({ features: Type.Array(Type.String(), { minItems: 1 }) })
 *   ]))
 *   subscription?: { type: 'premium'; features: string[] };
 * }
 * ```
 */
export function Custom(schema, options = {}) {
    return function (target, propertyKey) {
        const existingMetadata = Reflect.getMetadata(VALIDATION_METADATA_KEY, target.constructor) || { properties: [] };
        const propertyMetadata = {
            propertyKey,
            schema: schema,
            isOptional: options.optional,
            message: options.message,
        };
        existingMetadata.properties.push(propertyMetadata);
        Reflect.defineMetadata(VALIDATION_METADATA_KEY, existingMetadata, target.constructor);
    };
}
/**
 * TypeBox Schema 工厂类 - 提供常用的 schema 构建器
 */
export class SchemaFactory {
    /**
     * 创建枚举 schema
     */
    static enum(values, options) {
        return Type.Union(values.map((value) => Type.Literal(value)));
    }
    /**
     * 创建条件 schema
     */
    static conditional(condition, thenSchema, elseSchema) {
        return Type.Union([
            Type.Intersect([condition, thenSchema]),
            Type.Intersect([Type.Not(condition), elseSchema]),
        ]);
    }
    /**
     * 创建递归 schema
     */
    static recursive(callback) {
        return Type.Recursive(callback);
    }
    /**
     * 创建模板字符串 schema
     */
    static template(pattern) {
        return Type.String({ pattern });
    }
    /**
     * 创建范围验证 schema
     */
    static range(min, max, options) {
        if (options?.exclusive) {
            return Type.Number({
                exclusiveMinimum: min,
                exclusiveMaximum: max,
            });
        }
        return Type.Number({
            minimum: min,
            maximum: max,
        });
    }
    /**
     * 创建文件验证 schema
     */
    static file(options) {
        const baseSchema = Type.Object({
            filename: Type.String(),
            mimetype: Type.String(),
            size: Type.Number({ minimum: 0 }),
            buffer: Type.Any(), // 或者使用 Type.Uint8Array()
        });
        if (options?.maxSize) {
            return Type.Intersect([
                baseSchema,
                Type.Object({
                    size: Type.Number({ maximum: options.maxSize }),
                }),
            ]);
        }
        if (options?.allowedTypes) {
            return Type.Intersect([
                baseSchema,
                Type.Object({
                    mimetype: Type.Union(options.allowedTypes.map((type) => Type.Literal(type))),
                }),
            ]);
        }
        return baseSchema;
    }
    /**
     * 创建分页参数 schema
     */
    static pagination() {
        return Type.Object({
            page: Type.Optional(Type.Number({ minimum: 1, default: 1 })),
            limit: Type.Optional(Type.Number({ minimum: 1, maximum: 100, default: 10 })),
            sort: Type.Optional(Type.String()),
            order: Type.Optional(Type.Union([Type.Literal("asc"), Type.Literal("desc")])),
        });
    }
    /**
     * 创建搜索参数 schema
     */
    static search() {
        return Type.Object({
            q: Type.Optional(Type.String({ minLength: 1 })),
            fields: Type.Optional(Type.Array(Type.String())),
            filters: Type.Optional(Type.Record(Type.String(), Type.Any())),
        });
    }
    /**
     * 创建 UUID schema
     */
    static uuid() {
        return Type.String({
            pattern: "^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$",
        });
    }
    /**
     * 创建 MongoDB ObjectId schema
     */
    static objectId() {
        return Type.String({
            pattern: "^[0-9a-fA-F]{24}$",
            minLength: 24,
            maxLength: 24,
        });
    }
    /**
     * 创建颜色值 schema (hex)
     */
    static hexColor() {
        return Type.String({
            pattern: "^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$",
        });
    }
    /**
     * 创建信用卡号 schema
     */
    static creditCard() {
        return Type.String({
            pattern: "^(?:4[0-9]{12}(?:[0-9]{3})?|5[1-5][0-9]{14}|3[47][0-9]{13}|3[0-9]{13}|6(?:011|5[0-9]{2})[0-9]{12})$",
        });
    }
    /**
     * 创建手机号 schema (中国)
     */
    static chinesePhoneNumber() {
        return Type.String({
            pattern: "^1[3-9]\\d{9}$",
        });
    }
    /**
     * 创建身份证号 schema (中国)
     */
    static chineseIdCard() {
        return Type.String({
            pattern: "^[1-9]\\d{5}(18|19|20)\\d{2}((0[1-9])|(1[0-2]))(([0-2][1-9])|10|20|30|31)\\d{3}[0-9Xx]$",
        });
    }
}
/**
 * 预定义的常用验证装饰器
 */
export class CommonValidators {
    /**
     * UUID 验证
     */
    static UUID(options) {
        return Custom(SchemaFactory.uuid(), options);
    }
    /**
     * ObjectId 验证
     */
    static ObjectId(options) {
        return Custom(SchemaFactory.objectId(), options);
    }
    /**
     * 十六进制颜色验证
     */
    static HexColor(options) {
        return Custom(SchemaFactory.hexColor(), options);
    }
    /**
     * 信用卡号验证
     */
    static CreditCard(options) {
        return Custom(SchemaFactory.creditCard(), options);
    }
    /**
     * 中国手机号验证
     */
    static ChinesePhone(options) {
        return Custom(SchemaFactory.chinesePhoneNumber(), options);
    }
    /**
     * 中国身份证号验证
     */
    static ChineseIdCard(options) {
        return Custom(SchemaFactory.chineseIdCard(), options);
    }
    /**
     * JSON 字符串验证
     */
    static JsonString(options) {
        return Custom(Type.String(), {
            ...options,
            message: options?.message || "Must be a valid JSON string",
        });
    }
    /**
     * Base64 字符串验证
     */
    static Base64(options) {
        return Custom(Type.String({
            pattern: "^[A-Za-z0-9+/]*={0,2}$",
        }), options);
    }
    /**
     * IP 地址验证
     */
    static IPAddress(version, options) {
        const patterns = {
            v4: "^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$",
            v6: "^(?:[0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}$",
        };
        const pattern = version
            ? patterns[version]
            : `(${patterns.v4})|(${patterns.v6})`;
        return Custom(Type.String({ pattern }), options);
    }
}
//# sourceMappingURL=custom.js.map