import { type TSchema } from '@sinclair/typebox';
/**
 * 验证工具类
 */
export declare class ValidationUtils {
    private static readonly defaultPipe;
    /**
     * 验证对象
     */
    static validateObject<T>(target: new () => T, object: any): Promise<T>;
    /**
     * 验证值
     */
    static validateValue<T>(schema: TSchema, value: any, fieldName?: string): T;
    /**
     * 检查对象是否有效
     */
    static isValid<T>(target: new () => T, object: any): Promise<boolean>;
    /**
     * 获取验证错误而不抛出异常
     */
    static getValidationErrors<T>(target: new () => T, object: any): Promise<string[]>;
    /**
     * 从类生成 TypeBox Schema
     */
    static generateSchema<T>(target: new () => T): TSchema;
    /**
     * 类型安全的转换函数
     */
    static transform<T>(schema: TSchema, value: any): T;
    /**
     * 创建自定义验证装饰器
     */
    static createCustomValidator(validator: (value: any) => boolean, message?: string): (target: any, propertyKey: string | symbol) => void;
    /**
     * 批量验证多个对象
     */
    static validateBatch<T>(target: new () => T, objects: any[]): Promise<{
        valid: T[];
        errors: Array<{
            index: number;
            errors: string[];
        }>;
    }>;
    /**
     * 验证部分对象（仅验证存在的字段）
     */
    static validatePartial<T>(target: new () => T, object: any): Promise<Partial<T>>;
}
//# sourceMappingURL=validation.utils.d.ts.map